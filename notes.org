* Project 2: Flack
  :PROPERTIES:
  :CUSTOM_ID: project-2-flack
  :END:

** Milestones [2/7]
   :PROPERTIES:
   :CUSTOM_ID: milestones
   :END:

- [X] Complete the Display Name
- [X] Channel Creation
- [ ] Channel List
- [ ] Complete the Messages View
- [ ] Sending Messages
- [ ] Complete the Remembering the Channel
- [ ] Personal Touch

** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:
*** DONE *Display Name*: When a user visits your web application for the first
 time, they should be prompted to type in a display name that will
 eventually be associated with every message the user sends. If a user
 closes the page and returns to your app later, the display name
 should still be remembered.

*** *Channel Creation*: Any user should be able to create a new channel,
 so long as its name doesn't conflict with the name of an existing
 channel.

*** *Channel List*: Users should be able to see a list of all current
 channels, and selecting one should allow the user to view the
 channel. We leave it to you to decide how to display such a list.

*** *Messages View*: Once a channel is selected, the user should see any
 messages that have already been sent in that channel, up to a maximum
 of 100 messages. Your app should only store the 100 most recent
 messages per channel in server-side memory.

*** *Sending Messages*: Once in a channel, users should be able to send
 text messages to others the channel. When a user sends a message,
 their display name and the timestamp of the message should be
 associated with the message. All users in the channel should then see
 the new message (with display name and timestamp) appear on their
 channel page. Sending and receiving messages should NOT require
 reloading the page.

*** *Remembering the Channel*: If a user is on a channel page, closes the
 web browser window, and goes back to your web application, your
 application should remember what channel the user was on previously
 and take the user back to that channel.

*** *Personal Touch*: Add at least one additional feature to your chat
 application of your choosing! Feel free to be creative, but if you're
 looking for ideas, possibilities include: supporting deleting one's
 own messages, supporting use attachments (file uploads) as messages,
 or supporting private messaging between two users.

*** In =README.md=, include a short writeup describing your project,
 what's contained in each file, and (optionally) any other additional
 information the staff should know about your project. Also, include a
 description of your personal touch and what you chose to add to the
 project.

** How to Submit
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit
   :END:

1. Using [[https://git-scm.com/downloads][Git]], push your work to =https://github.com/submit50/USERNAME.git=, where =USERNAME= is your
   GitHub username, on a branch called =cs50/web/2018/x/projects/2= or, if you've installed
   [[https://cs50.readthedocs.io/submit50/][=submit50=]],

2. [[https://www.howtogeek.com/205742/how-to-record-your-windows-mac-linux-android-or-ios-screen/][Record a 1- to 5-minute screencast]] in which you demonstrate your app's functionality and/or walk
   viewers through your code.  [[https://www.youtube.com/upload][Upload that video to YouTube]] (as unlisted or public, but not private)
   or somewhere else.

3. [[https://forms.cs50.io/35643afd-5a3b-4482-bcec-ddbc61af297f][Submit this form]].


** Plannning

*** Bootstrap changing active navbar menu item
I had some issues with changing the navbar active item in the previous project.
According to this [[https://stackoverflow.com/questions/24514717/bootstrap-navbar-active-state-not-working?rq=1][SO]] post, you need to manage it yourself. (Bootstrap 4)

#+BEGIN_SRC javascript
$(".nav .nav-link").on("click", function(){
   $(".nav").find(".active").removeClass("active");
   $(this).addClass("active");
});
#+END_SRC

*** Channel Creation ideas
1. test submitting different usernames to 127.0.0.1 and 0.0.0.0
2. check if the usernames are different
   - with a dictionary at the server that remembers all users
   - with localStorage that remembers the logged in user
3. conditinally load menu items like "Join Channels" if the username gets filled
   - maybe using a event listener that checks if the form is complete?
   - maybe sending data to server to a global variable
* README
* Dev Notes

** Running Flask in dev environment with WebSocket
Many errors occur like "Websocket not available". Case discussed
in this [[https://github.com/miguelgrinberg/Flask-SocketIO/issues/647][Github issue]].

*soln*: =pip install gevent=, allows using =python application.py= with no erorrs.

 =flask run= does not work with Websocket cause of package author decision.

To run in debug mode, add this at end of =application.py=
#+BEGIN_SRC python
if __name__ == '__main__':
    socketio.run(app, debug=True, host="0.0.0.0")
#+END_SRC

** getAttribute() vs .value
.value gets input value in real time

one is implementation dependent (different browsers) other is standard

detailed explanation [[https://stackoverflow.com/questions/11973678/difference-between-element-value-and-element-getattributevalue][here]]

** Bugs

*** index.js

=updateLiveChannelsList= invocation re-inserts list items when newer
item becomes available in the server

**** FIX clear out existing table data
by removing all firstChild of =ul= element
*** index.html

**** DONE cannot persist fetching of channels
     - Note taken on [2019-07-02 mar 10:45] \\
       at first I thought this may be solved with localStorage

       but then I realized that I need to fetch the updated liv echannels

       after successful insertion as well as after loading the page.
realted to updateLivechannelsList: won't persist channels list even
though variable in database server does persist
