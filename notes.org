* Project 2: Flack
  :PROPERTIES:
  :CUSTOM_ID: project-2-flack
  :END:

** Milestones [7/7]
   :PROPERTIES:
   :CUSTOM_ID: milestones
   :END:

- [X] Complete the Display Name
- [X] Channel Creation
- [X] Channel List
- [X] Complete the Messages View
- [X] Sending Messages
- [X] Complete the Remembering the Channel
- [X] Personal Touch

** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:
*** DONE *Display Name*: When a user visits your web application for the first
 time, they should be prompted to type in a display name that will
 eventually be associated with every message the user sends. If a user
 closes the page and returns to your app later, the display name
 should still be remembered.

*** DONE *Channel Creation*: Any user should be able to create a new channel,
 so long as its name doesn't conflict with the name of an existing
 channel.

*** DONE *Channel List*: Users should be able to see a list of all current
 channels, and selecting one should allow the user to view the
 channel. We leave it to you to decide how to display such a list.

*** DONE *Messages View*: Once a channel is selected, the user should see any
 messages that have already been sent in that channel, up to a maximum
 of 100 messages. Your app should only store the 100 most recent
 messages per channel in server-side memory.

*** DONE *Sending Messages*: Once in a channel, users should be able to send
 text messages to others the channel. When a user sends a message,
 their display name and the timestamp of the message should be
 associated with the message. All users in the channel should then see
 the new message (with display name and timestamp) appear on their
 channel page. Sending and receiving messages should NOT require
 reloading the page.

*** DONE *Remembering the Channel*: If a user is on a channel page, closes the
 web browser window, and goes back to your web application, your
 application should remember what channel the user was on previously
 and take the user back to that channel.

 - I've thought of implementing this with a single localStorage item
   called `chatting' set equal to room that was last chatted on.

*** DONE *Personal Touch*: Add at least one additional feature to your chat
 application of your choosing! Feel free to be creative, but if you're
 looking for ideas, possibilities include: supporting deleting one's
 own messages, supporting use attachments (file uploads) as messages,
 or supporting private messaging between two users.

*** TODO In =README.md=, include a short writeup describing your project,
 what's contained in each file, and (optionally) any other additional
 information the staff should know about your project. Also, include a
 description of your personal touch and what you chose to add to the
 project.

** How to Submit
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit
   :END:
   EDIT: push your work to https://github.com/me50/USERNAME.git, where USERNAME is your GitHub username, on a branch called web50/projects/2019/x/2
1. Using [[https://git-scm.com/downloads][Git]], +push your work to =https://github.com/submit50/USERNAME.git=, where =USERNAME= is your
   GitHub username, on a branch called =cs50/web/2018/x/projects/2= or, if you've installed
   [[https://cs50.readthedocs.io/submit50/][=submit50=]],+

2. [[https://www.howtogeek.com/205742/how-to-record-your-windows-mac-linux-android-or-ios-screen/][Record a 1- to 5-minute screencast]] in which you demonstrate your app's functionality and/or walk
   viewers through your code.  [[https://www.youtube.com/upload][Upload that video to YouTube]] (as unlisted or public, but not private)
   or somewhere else.

3. [[https://forms.cs50.io/35643afd-5a3b-4482-bcec-ddbc61af297f][Submit this form]].


** Plannning

*** Bootstrap changing active navbar menu item
I had some issues with changing the navbar active item in the previous project.
According to this [[https://stackoverflow.com/questions/24514717/bootstrap-navbar-active-state-not-working?rq=1][SO]] post, you need to manage it yourself. (Bootstrap 4)

#+BEGIN_SRC javascript
$(".nav .nav-link").on("click", function(){
   $(".nav").find(".active").removeClass("active");
   $(this).addClass("active");
});
#+END_SRC

*** Channel Creation ideas
1. test submitting different usernames to 127.0.0.1 and 0.0.0.0
2. check if the usernames are different
   - with a dictionary at the server that remembers all users
   - with localStorage that remembers the logged in user
3. conditinally load menu items like "Join Channels" if the username gets filled
   - maybe using a event listener that checks if the form is complete?
   - maybe sending data to server to a global variable
* README
** Getting Started
*** Run the virtual environment
by first setting it with =$ python -m venv venv= and then running it with
=$ source venv/bin/activate=

*** Set environment variables
either by typing on your terminal (=$ FLASK_APP=application.py; SECRET_KEY="secret"=)

or by placing them inside a file (i.e. =.env=)
#+BEGIN_SRC shell
  # these go inside a .env file or such
  export FLASK_APP=application.py
  export SECRET_KEY='Your_secret!!!'
#+END_SRC
and sourcing it (i.e. =. .env= or =source .env=)

*** Install dependencies
first check that the virtual environment is active then run =$ pip install -r requirements.txt=

*** Start the server
with =$python application.py= since development sever does work with FlaskSocketIO (i.e =$ flask run=)

*** Go to =127.0.0.1:5000=
in your browser then type a name which will be your moniker to identify you in the chat

**** Preferably test using Firefox
I'm using a linux machine thus hard to get Chrome or Safari. So, I'm only testing with Firefox.

I believe Chrome should work; I quickly tested using a seperate machine that runs macOS and saw bugs for
timestamp creation. So... keep that in mind

** =application.py=
handles login/logout flow with http requests and then leaves everything else to websockets.

The nature of this flow is documented in the [[https://flask-socketio.readthedocs.io/en/latest/][FlaskSocketIO documentation]], and the author actually
encourages this one for simplicity's sake. You'll only see =/leave=, =/= and =/adduser= as http routes.

*** Session vs localStorage
 One thing to not about the =/leave= route is that it does not remove the user from the database -- that is
 due to the nature of this chat app that assumes a user will chat quickly and then leave. Therefore, their
 name would become available to any other user, allowing a different person to claim the past username's messages.
 By not erasing the user from the database during logout, I'm preventing their username and their respective
 chat messages to be claimed by another person.

 Another thing is that the route accepts AJAX requests because it will take care of clearing
 =localStorage= and sending a last 'leave' event to let members of a room chat know that the user
 logged out, which implicitly signals the user left a room chat.

 Furthermore, on login (i.e. =/adduser=) the server will save the user's username in a session
 cookie and later on in =localStorage=  because the client needs a way to redraw
 the screen when it closes a window. The session cookie can only remember on the server side but cannot
 interact in any way with the client via websockets. =localStorage= stores a "username" and "joined" variable
 to help redraw the screen and fetch the channels, _which are live and current_, to the client when it reopens a window.
 The ="joined"= variable gets used heavily in the client side to toggle several CSS styles as to give feedback to the
 user about their currently joined chat room, if there is any, or the current live and available chats in the
 "Live Channels" section.

*** Channel creation
channel creation, deletion, and sending of messages happen with websockets.

 It may seem like there are too many websocket event handlers but I built them in a way
 that I could give proper feedback to user: that a user should know if a
 channel can be created or not (and why).

 The server (that is file =application.py=) only stores up to 100 messages: you'll see
 in line  =177=
 #+BEGIN_SRC python
           db["channels"].update({
               channel: {
                   "messages": collections.deque(maxlen=100)
               }
           })

 #+END_SRC

  specifically the statement =collections.deque(maxlen=100)=, which automagically pops
   message items when there are more than 100.

*** Handling timestamps
 All messages are saved with a timestamp, created at the server. They are later converted to 24 hour
 UTC format  when they are received by the client (the browser). The Date API kind of
 automagically does the conversion to human readable local time format since I'm feeding a raw UTC
 created by Python. For example
 #+BEGIN_SRC javascript
     const now = new Date(date);
 #+END_SRC

 Where the variable =date= is a string sent from the Flask server in UTC format.

 That is from what gets output in =date=
 #+BEGIN_SRC python
   msg_id, date = "item-" + str(uuid4().hex), str(datetime.now(timezone.utc))
 #+END_SRC

 Since browser vendors (Chrome, FireFox, Safari etc) implement the Date API differently, please
 expect results to vary from browser to browser. For example, in Safari, you will notice that the
 timestamp on the message won't be something like =[10:22]=, but something like =[...]=. I should
 further investigate the reason this happens, but I suspect it may have to do with cross browser
 compatibility, which is outside of the scope of the project.

 Please test the app in Firefox.

** =helpers.py=
Contains two decorators which prevent interaction with the server unless the user is authenticated.

There is also a small helper function that loops through a variable to find a desired character.
This is used to error check/sanitize input during channel creation (requests sent via websocket to
create a channel).

** =static/index.js=
Handles all render logic. The way the file is written expresses more or less my train of thought...
There are several functions that need work and polishing. Also, I did not use much callbacks in
websocket statements like
#+BEGIN_SRC javascript
  socket.emit('join', {
  // ...
  }, ok => {
    // This is a callback
  })
#+END_SRC

which would have been nice to provide other features like whether messages were read, or whether
they actually got sent by the server, or allowing resending them on network errors etc etc.

*** =switch= statement
There's a considerably large =switch= statement wrapped around a =socket.on("json",... )= event handler.

Most of the app's logic happens here. When channels get joined, this statement takes care of redrawing
the user's screen to reflect changes in state. Message sending also gets handled in this statement as well
as message deletion. There are other minor things to notice in this statement like the seperation between
"message", "notification", and "refresh" and "sync".

**** Remembering the channel
 The "refresh" and "sync" handle different events. A "refresh" is when a user closes the window and goes
 back to the app and sees the chat wherever they left off.  A "sync" is when a user, for some reason, refreshes
 the window and fetches all necessary state data to render active channels and/or any joined chat. They are very
 similar but a "refresh" handles what happens in a chat room and also does not notify users of a rejoin, and "sync"
 is something that mostly happens on login.

** =static/main.scss=
Mostly helps formatting the conversation window where messages get displayed by giving it a fixed
height. Handles other minor styling. Most styling users bootstrap 4.

** HTML Templates
*** =layout.html=
The app barely renders other pages besides =index.html=. This page contains the navigation menu
and a main container where most data gets rendered.

*** =error.html=
A simple web page that aids giving feedback when a user sents incorrent authentication data.

*** =index.html=
Main page that divides two columns: the first one to display active channels and the other one to
display the current active room/conversation/channel.

You don't need to refresh this page to receive messages, receive notifications,  create channels,
or delete messages.

*** =adduser.html=
Page that tells a user to identify themselves. Has only one input field, meaning it only requires a username.

** Personal Touch
*** "Deleting" messages
A user will see an "x" button beside their message indicating that they may request to delete it.

I'm not really deleting their messages because I would rather not create gaps in a conversation.

Instead, I decided to overwrite them because I would like users to know what happened in the conversation, they decide
to close the window and come back again wherever left off.

I do not implement strict confirmation because it would be annoying to ask the user for
a pop-up confirmation to delete their own message.

The app's chat rooms have a short lifespans -- a user should be able to delete them as quickly as possible.

** Notes
*** Bugs
Known bugs that require further investigation
**** Tested on Safari but won't show dates
renders dates as =[...]= perhaps the way =new Date()= works in Safari differs from
Firefox's implementation
***** [[https://stackoverflow.com/questions/5802461/javascript-which-browsers-support-parsing-of-iso-8601-date-string-with-date-par?noredirect=1&lq=1][support parsing of ISO-8601 Date String]]
***** [[https://stackoverflow.com/questions/15109894/new-date-works-differently-in-chrome-and-firefox][Date API Chrome vs Firefox]]
***** [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Syntax][Date.parse implicitly calls new Date()]]
***** [[https://docs.python.org/3.7/library/datetime.html#datetime.datetime.isoformat][python datetime.isoformat(sep='T', timespec='minutes') to manipulate ISO 8601 string]]
* Dev Notes

** Running Flask in dev environment with WebSocket
Many errors occur like "Websocket not available". Case discussed
in this [[https://github.com/miguelgrinberg/Flask-SocketIO/issues/647][Github issue]].

*soln*: =pip install gevent=, allows using =python application.py= with no erorrs.

 =flask run= does not work with Websocket cause of package author decision.

To run in debug mode, add this at end of =application.py=
#+BEGIN_SRC python
if __name__ == '__main__':
    socketio.run(app, debug=True, host="0.0.0.0")
#+END_SRC

although =host= is optinal

** getAttribute() vs .value
.value gets input value in real time

one is implementation dependent (different browsers) other is standard

detailed explanation [[https://stackoverflow.com/questions/11973678/difference-between-element-value-and-element-getattributevalue][here]]

** Bugs

*** index.js [3/3]

 - [X] =updateLiveChannelsList= invocation re-inserts list items when newer
item becomes available in the server-side

- [X] before login, several tags are not defined, maybe seperate each function by loading it
by its corresponding view

- [X] the "create channel" form allows entering empty fields

**** FIX clear out existing table data
by removing all firstChild of =ul= element
*** index.html

**** DONE cannot persist fetching of channels
     - Note taken on [2019-07-02 mar 10:45] \\
       at first I thought this may be solved with localStorage

       but then I realized that I need to fetch the updated liv echannels

       after successful insertion as well as after loading the page.
realted to updateLivechannelsList: won't persist channels list even
though variable in database server does persist
