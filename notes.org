* Project 2: Flack
  :PROPERTIES:
  :CUSTOM_ID: project-2-flack
  :END:

** Overview
   :PROPERTIES:
   :CUSTOM_ID: overview
   :END:

In this project, you'll build an online messaging service using Flask,
similar in spirit to [[https://slack.com/][Slack]]. Users will be able
to sign into your site with a display name, create channels (i.e.
chatrooms) to communicate in, as well as see and join existing channels.
Once a channel is selected, users will be able to send and receive
messages with one another in real time. Finally, you'll add a personal
touch to your chat application of your choosing!

** Milestones [0/7]
   :PROPERTIES:
   :CUSTOM_ID: milestones
   :END:

- [ ] Complete the Display Name
- [ ] Channel Creation
- [ ] Channel List steps.
- [ ] Complete the Messages View
- [ ] Sending Messages steps
- [ ] Complete the Remembering the Channel
- [ ] Personal Touch steps

** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:

*** *Display Name*: When a user visits your web application for the first
 time, they should be prompted to type in a display name that will
 eventually be associated with every message the user sends. If a user
 closes the page and returns to your app later, the display name
 should still be remembered.
*** *Channel Creation*: Any user should be able to create a new channel,
 so long as its name doesn't conflict with the name of an existing
 channel.
*** *Channel List*: Users should be able to see a list of all current
 channels, and selecting one should allow the user to view the
 channel. We leave it to you to decide how to display such a list.
*** *Messages View*: Once a channel is selected, the user should see any
 messages that have already been sent in that channel, up to a maximum
 of 100 messages. Your app should only store the 100 most recent
 messages per channel in server-side memory.
*** *Sending Messages*: Once in a channel, users should be able to send
 text messages to others the channel. When a user sends a message,
 their display name and the timestamp of the message should be
 associated with the message. All users in the channel should then see
 the new message (with display name and timestamp) appear on their
 channel page. Sending and receiving messages should NOT require
 reloading the page.
*** *Remembering the Channel*: If a user is on a channel page, closes the
 web browser window, and goes back to your web application, your
 application should remember what channel the user was on previously
 and take the user back to that channel.
*** *Personal Touch*: Add at least one additional feature to your chat
 application of your choosing! Feel free to be creative, but if you're
 looking for ideas, possibilities include: supporting deleting one's
 own messages, supporting use attachments (file uploads) as messages,
 or supporting private messaging between two users.
*** In =README.md=, include a short writeup describing your project,
 what's contained in each file, and (optionally) any other additional
 information the staff should know about your project. Also, include a
 description of your personal touch and what you chose to add to the
 project.

** How to Submit
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit
   :END:

1. Using [[https://git-scm.com/downloads][Git]], push your work to =https://github.com/submit50/USERNAME.git=, where =USERNAME= is your
   GitHub username, on a branch called =cs50/web/2018/x/projects/2= or, if you've installed
   [[https://cs50.readthedocs.io/submit50/][=submit50=]],

2. [[https://www.howtogeek.com/205742/how-to-record-your-windows-mac-linux-android-or-ios-screen/][Record a 1- to 5-minute screencast]] in which you demonstrate your app's functionality and/or walk
   viewers through your code.  [[https://www.youtube.com/upload][Upload that video to YouTube]] (as unlisted or public, but not private)
   or somewhere else.

3. [[https://forms.cs50.io/35643afd-5a3b-4482-bcec-ddbc61af297f][Submit this form]].

* README
